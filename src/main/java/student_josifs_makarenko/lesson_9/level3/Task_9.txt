Найдите в интернете информацию про класс java.util.Optional.
Для чего применяются объекты этого класса?

В JDK 8 был введён новый утилитарный класс java.util.Optional, целями которого являются повышение null-safety
и читаемости кода при работе со ссылками, значения которых могут быть null.
Главная же цель Optional — замена null-значений, благодаря чему должна повышаться безопасность и читаемость кода.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Какие два состояния могут быть у объектов этого класса?



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Как создаются экземпляры данного класса?

Объект типа Optional может быть создан тремя методами:

Optional.of — для создания Optional из не-null значения. При передаче в качестве аргумента null будет выкинуто исключение NullPointerException.
Optional.ofNullable — для создания Optional из значения, которое может быть null. Если значение не null, то будет создан Optional со значением, иначе — пустой Optional.
Optional.empty — для создания пустого Optional.


Примеры:
Пустой Optional объект
Optional<Person> optionalPerson = Optional.empty();

Optional объект с ненулевым значением
Optional<Person> optionalNonNull = Optional.of(somePerson);

Optional объект с возможностью нулевого значения
Optional<Person> optionalNullable = Optional.ofNullable(somePerson);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Как можно проверить в каком состоянии находится экземпляр данного класса?

при помощи метода isPresent()

if (person.isPresent()) {
	System.out.println(person.get());
} else {
	System.out.println("Person not found!");
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Как можно получить объект, который находится внутри Optional?

Для получения значения из Optional существует несколько методов,
некоторые из которых предусматривают получение значений по умолчанию,
если Optional не содержит никакого значения.

Методы:
get()
Метод get — простейший способ получения значения объекта Optional.

orElse()
Метод orElse возвращает значение объекта Optional или значение, переданное ему в качестве аргумента, которое может быть null.

orElseGet()
Метод orElseGet, в отличии от orElse принимает в качестве аргумента объект класса java.util.function.Supplier,
который вернёт «запасное» значение, если объект Optional пустой.

orElseThrow()
Метод orElseThrow возвращает значение объекта Optional или выбрасывает исключение,
возвращаемое объектом типа java.util.function.Supplier переданным ему в качестве аргумента.